#!/bin/bash

# the base of all test-function.
# can override below 2 vars till meet your needs.
# DEBUG level 0 -- No debug 
# DEBUG level 1 -- simple debug info
# DEBUG level 2 -- more detail about debug info
# if fall into product-time,comment above and uncomment below line:
# declare -i DEBUG=0

declare -i DEBUG=2

FILENAME=$( basename "$0" 2>/dev/null )
declare DEBUGTITLE="[${FILENAME}  +]"

function include_all(){
	for file in ${FUNCPATH}/*\.sh
	do
		. $file
	done
}
function huali(){
	echo '   -------------------------------------------------------'
	echo '   ----------------- HUA LI SEPARATOR LINE  --------------'
	echo '   -------------------------------------------------------'
}
function echotest(){
	echo $DEBUGTITLE "$1" #it is import to let all echo msg in a double quote!
}

# iisr=if i say right
function iisr(){
	# "$1" is a expression ,its value equal boolean 'true' or 'false'.
	# ensure "$1" is a normal expression,add 2 restrictions.
	# restriction1:
	#	only accept one argument.
	# 
	if test $# -ne 1;then
		echo -en  "\n\033[1;31m::ERROR::need (only) one argument. \033[0m\n" 
		return
	fi

	# restriction2:
	#	must contain a '==' symbol.
	# 	split "$1" (like "3 == 3") from a string to an array
	thatarray=($1)
	if test ${#thatarray[@]} -ne 3;then
		# means it not normal 3 element expression.
		echo -en  "\n\033[1;31m::ERROR::need a normal expression contains two space symbols. \033[0m\n" 
		return
	elif test ${thatarray[1]} != '==';then
		echo -en  "\n\033[1;31m::ERROR::need a normal expression contains a logic equal symbol. \033[0m\n" 
		return
	fi
		
		
	eval "test $1"
	if test $? -eq 0;then
		echo -en "\n::TRUE:: ""$1""\n" 
	else
	# add colorfully text
		echo -en  "\n\033[1;31m::ERROR:: $1\033[0m\n" 
	fi
}
# iisl=if i say like
function iisl(){
	# iisl()'s arguments has 2
	# $1 is a subj within expression 'left',and $2 is 'right',means $1 == $2
	# $1,and $2 and symbols,construct a assertion.
	if test $# -ne 2;then
		echo Bad Expression Please Check
		exit 2
	fi
	if [[ $1 == $2 ]] 
	then
		echo -en "\n::TRUE::\n(""$1"") == $2\n" 
	else
	# add colorfully text
		echo -en  "\n\033[1;31m::ERROR::\n (""$1"") == $2\033[0m\n" 
	fi
}

#invoke include method now.
include_all
